[  
   {  
      "apiimplnote":[  
         {  
            "controllerName":"certified-product-controller",
            "endPointLink":[  
               {  
                  "implementationNote":"The required 'versionId' parameter filters the certified products to those assigned to that version.",
                  "link":"getCertifiedProductsByVersionUsingGET"
               },
               {  
                  "implementationNote":"ROLE_ADMIN, ROLE_ACB and have administrative authority on the ACB that uploaded the product.",
                  "link":"getPendingCertifiedProductsUsingGET"
               },
               {  
                  "implementationNote":"ROLE_ADMIN, ROLE_ACB and administrative authority on the ACB for each pending certified product is required.",
                  "link":"getPendingCertifiedProductByIdUsingGET"
               },
               {  
                  "implementationNote":"ROLE_ADMIN or have ROLE_ACB and administrative authority on the ACB for each pending certified product is required",
                  "link":"rejectPendingCertifiedProductUsingDELETE"
               },
               {  
                  "implementationNote":"ROLE_ADMIN or have ROLE_ACB and administrative authority on the ACB for each pending certified product is required",
                  "link":"confirmPendingCertifiedProductUsingPOST"
               },
               {  
                  "implementationNote":"ROLE_ADMIN or user uploading the file must have ROLE_ACB and administrative authority on the ACB(s) specified in the file",
                  "link":"uploadUsingPOST"
               },
               {  
                  "implementationNote":"ROLE_ADMIN, ROLE_ONC, or ROLE_ACB and have administrative authority on the ACB that certified the product",
                  "link":"updateCertifiedProductUsingPUT"
               }
            ]
         },
         {  
            "controllerName":"authentication-controller",
            "endPointLink":[  
               {  
                  "implementationNote":"Call this method to authenticate a user. The value returned is that user's token which must be passed on all subsequent requests in the Authorization header. Specifically, the Authorization header must have a value of 'Bearer token-that-gets-returned'.",
                  "link":"authenticateJSONUsingPOST"
               },
               {  
                  "implementationNote":"Change a user's expired password as long as the old password passed in matches what is stored in the database.",
                  "link":"changeExpiredPasswordUsingPOST"
               },
               {  
                  "implementationNote":"Change the logged in user's password as long as the old password passed in matches what is stored in the database.",
                  "link":"changePasswordUsingPOST"
               },
               {  
                  "implementationNote":"Reset the users password.",
                  "link":"resetPasswordUsingPOST_1"
               },
            ]
         },
         {  
            "controllerName":"activity-controller",
            "endPointLink":[  
               {  
                  "implementationNote":" ROLE_ADMIN and ROLE_ONC may see activity for all certification bodies. ROLE_ACB can see their own information.",
                  "link":"activityForACBsUsingGET"
               },
               {  
                  "implementationNote":"ROLE_ADMIN and ROLE_ONC may see activity for all certification bodies. ROLE_ACB can see their own information.",
                  "link":"activityForACBByIdUsingGET"
               },
               {  
                  "implementationNote":"Anonymous users are only allowed to see activity for public announcements. All other roles can see private and public announcements.",
                  "link":"activityForAnnouncementByIdUsingGET"
               },
               {  
                  "implementationNote":"Only ROLE_ADMIN or ROLE_ONC",
                  "link":"activityForApiKeysUsingGET"
               },
               {  
                  "implementationNote":" ROLE_ADMIN and ROLE_ONC may see activity for all testing labs. ROLE_ATL can see their own information.",
                  "link":"activityforATLsUsingGET"
               },
               {  
                  "implementationNote":"ROLE_ADMIN and ROLE_ONC may see activity for all testing labs. ROLE_ATL can see their own information.",
                  "link":"activityForATLByIdUsingGET"
               },
               {  
                  "implementationNote":"ROLE_ADMIN, ROLE_ONC, or ROLE_ACB (specific to own ACB).",
                  "link":"activityForPendingCertifiedProductsUsingGET"
               },
               {  
                  "implementationNote":"ROLE_ADMIN, ROLE_ONC, or ROLE_ACB (specific to own ACB).",
                  "link":"activityForPendingCertifiedProductByIdUsingGET"
               },
               {  
                  "implementationNote":"ROLE_ADMIN, ROLE_ONC",
                  "link":"activityByUserUsingGET_1"
               },
               {  
                  "implementationNote":"ROLE_ADMIN, ROLE_ONC",
                  "link":"activityByUserUsingGET"
               },
               {  
                  "implementationNote":"ROLE_ADMIN, ROLE_ONC, ROLE_CMS_STAFF (of ROLE_CMS_STAFF Users), ROLE_ACB (of their own), or ROLE_ATL (of their own).",
                  "link":"activityForUsersUsingGET_1"
               },
               {  
                  "implementationNote":"ROLE_ADMIN, ROLE_ONC, ROLE_CMS_STAFF (of ROLE_CMS_STAFF Users), ROLE_ACB (of their own), or ROLE_ATL (of their own).",
                  "link":"activityForUsersUsingGET"
               },
               {  
                  "implementationNote":"Users must specify 'start' and 'end' parameters to restrict the date range of the results. Security Restrictions: ROLE_ADMIN and ROLE_ONC may see activity for all certification bodies. ROLE_ACB can see activity for their own ACBs.",
                  "link":"metadataForAcbsUsingGET"
               },
               {  
                  "implementationNote":"ROLE_ADMIN, ROLE_ONC, ROLE_CMS_STAFF (of ROLE_CMS_STAFF Users), ROLE_ACB (of their own), or ROLE_ATL (of their own).",
                  "link":"activityForUsersUsingGET"
               },
               {  
                  "implementationNote":"A start and end date may optionally be provided to limit activity results.",
                  "link":"metadataForAcbByIdUsingGET"
               },
               {  
                  "implementationNote":"Users must specify 'start' and 'end' parameters to restrict the date range of the results.Security Restrictions: Anonymous users are only allowed to see activity for public announcements. All other roles can see private and public announcements.",
                  "link":"metadataForAnnouncementsUsingGET"
               },
               {  
                  "implementationNote":"Users must specify 'start' and 'end' parameters to restrict the date range of the results.Security Restrictions: ROLE_ADMIN and ROLE_ONC may see activity for all annual reports. ROLE_ACB can see activity for their own ACBs.",
                  "link":"metadataForAnnualReportsUsingGET"
               },
               {  
                  "implementationNote":"Users must specify 'start' and 'end' parameters to restrict the date range of the results. Security Restrictions: ROLE_ADMIN and ROLE_ONC may see activity for all testing labs. ROLE_ATL can see activity for their own ATLs.",
                  "link":"metadataForAtlsUsingGET"
               },
               {  
                  "implementationNote":"A start and end date may optionally be provided to limit activity results.",
                  "link":"metadataForAtlByIdUsingGET"
               },
               {  
                  "implementationNote":"Users must specify 'start' and 'end' parameters to restrict the date range of the results.Security Restrictions: ROLE_ADMIN and ROLE_ONC may see activity for all chan ge requests. ROLE_ACB can see activity for change requests they are associated with.",
                  "link":"metadataForChangeRequestsUsingGET"
               },
               {  
                  "implementationNote":"Users must specify 'start' and 'end' parameters to restrict the date range of the results.Security Restrictions: ROLE_ADMIN and ROLE_ONC may see activity for all complaints. ROLE_ACB can see activity for their own ACBs.",
                  "link":"metadataForComplaintsUsingGET"
               },
               {  
                  "implementationNote":"Users must specify 'start' and 'end' parameters to restrict the date range of the results.",
                  "link":"metadataForCorrectiveActionPlansUsingGET"
               },
               {  
                  "implementationNote":"Users must specify 'start' and 'end' parameters to restrict the date range of the results.",
                  "link":"metadataForDevelopersUsingGET"
               },
               {  
                  "implementationNote":"A start or end date may optionally be provided to limit activity results.",
                  "link":"metadataForDeveloperByIdUsingGET"
               },
               {  
                  "implementationNote":"Users must specify 'start' and 'end' parameters to restrict the date range of the results.",
                  "link":"metadataForListingsUsingGET"
               },
               {  
                  "implementationNote":"{chplPrefix}-{identifier} represents a valid CHPL Product Number. A valid call to this service would look like activity/certified_products/CHP-999999. A start and end date may optionally be provided to limit activity results.",
                  "link":"metadataForListingByChplProductNumberUsingGET"
               },
               {  
                  "implementationNote":"A start and end date may optionally be provided to limit activity results.",
                  "link":"metadataForListingByIdUsingGET"
               },
               {  
                  "implementationNote":"{year}.{testingLab}.{certBody}.{vendorCode}.{productCode}.{versionCode}.{icsCode}.{addlSoftwareCode}.{certDateCode} represents a valid CHPL Product Number. A valid call to this service would look like activity/certified_products/YY.99.99.9999.XXXX.99.99.9.YYMMDD. A start and end date may optionally be provided to limit activity results.",
                  "link":"metadataForListingByChplProductNumberUsingGET_1"
               },
               {  
                  "implementationNote":"Users must specify 'start' and 'end' parameters to restrict the date range of the results.",
                  "link":"metadataForPendingListingsUsingGET"
               },
               {  
                  "implementationNote":"Users must specify 'start' and 'end' parameters to restrict the date range of the results.",
                  "link":"metadataForPendingSurveillancesUsingGET"
               },
               {  
                  "implementationNote":"Users must specify 'start' and 'end' parameters to restrict the date range of the results.",
                  "link":"metadataForProductsUsingGET"
               },
               {  
                  "implementationNote":"A start or end date may optionally be provided to limit activity results.",
                  "link":"metadataForProductByIdUsingGET"
               },
               {  
                  "implementationNote":"Users must specify 'start' and 'end' parameters to restrict the date range of the results.Security Restrictions: ROLE_ADMIN and ROLE_ONC may see activity for all quarterly reports. ROLE_ACB can see activity for their own ACBs.",
                  "link":"metadataForQuarterlyReportsUsingGET"
               },
               {  
                  "implementationNote":"Users must specify 'start' and 'end' parameters to restrict the date range of the results.",
                  "link":"metadataForUsersUsingGET"
               },
               {  
                  "implementationNote":"Users must specify 'start' and 'end' parameters to restrict the date range of the results.",
                  "link":"metadataForVersionsUsingGET"
               },
               {  
                  "implementationNote":"A start or end date may optionally be provided to limit activity results.",
                  "link":"metadataForVersionByIdUsingGET"
               },
               {  
                  "implementationNote":"A start or end date may optionally be provided to limit activity results.",
                  "link":"metadataForVersionByIdUsingGET"
               },
            ]
         },
         {  
            "controllerName":"announcement-controller",
            "endPointLink":[  
               {  
                  "implementationNote":"ROLE_ADMIN and ROLE_ONC can retrieve future scheduled announcements and private announcements. ROLE_ACB, ROLE_ATL, and ROLE_CMS_STAFF can retrieve private announcements. All users can retrieve public announcements.",
                  "link":"getAnnouncementsUsingGET"
               },
               {  
                  "implementationNote":"ROLE_ADMIN, ROLE_ONC",
                  "link":"createUsingPOST"
               },
               {  
                  "implementationNote":"ROLE_ADMIN and ROLE_ONC can retrieve future scheduled announcements and private announcements. ROLE_ACB, ROLE_ATL, and ROLE_CMS_STAFF can retrieve private announcements. All users can retrieve public announcements.",
                  "link":"getAnnouncementByIdUsingGET"
               },
               {  
                  "implementationNote":"ROLE_ADMIN or ROLE_ONC",
                  "link":"updateAnnouncementUsingPUT"
               },
               {  
                  "implementationNote":"ROLE_ADMIN or ROLE_ONC",
                  "link":"deleteAnnouncementUsingDELETE"
               }
            ]
         },
         {  
            "controllerName":"api-key-controller",
            "endPointLink":[  
               {  
                  "implementationNote":"ROLE_ADMIN, ROLE_ONC",
                  "link":"listKeysUsingGET"
               },
               {  
                  "implementationNote":"Anyone wishing to access the methods listed in this API must have an API key. This service will auto-generate a key and send it to the supplied email address. It must be included in subsequent API calls via either a header with the name 'API-Key' or as a URL parameter named 'api_key'.",
                  "link":"registerUsingPOST"
               },
               {  
                  "implementationNote":"ROLE_ADMIN, ROLE_ONC",
                  "link":"listActivityUsingGET"
               },
               {  
                  "implementationNote":"ROLE_ADMIN, ROLE_ONC",
                  "link":"listActivityByKeyUsingGET"
               },
               {  
                  "implementationNote":"ROLE_ADMIN and ROLE_ONC",
                  "link":"revokeUsingDELETE"
               }
            ]
         },
         {  
            "controllerName":"certification-body-controller",
            "endPointLink":[  
               {  
                  "implementationNote":"All users can see all active ACBs.",
                  "link":"getAcbsUsingGET"
               },
               {  
                  "implementationNote":"ROLE_ADMIN and ROLE_ONC",
                  "link":"createAcbUsingPOST"
               },
               {  
                  "implementationNote":"ROLE_ADMIN, ROLE_ONC, or ROLE_ACB with administrative authority",
                  "link":"updateAcbUsingPUT"
               },
               {  
                  "implementationNote":"ROLE_ADMIN, ROLE_ONC, or have administrative or read authority on the specified ACB",
                  "link":"getUsersUsingGET"
               },
               {  
                  "implementationNote":"must have ROLE_ADMIN or ROLE_ACB and have administrative authority on the specified ACB",
                  "link":"deleteUserFromAcbUsingDELETE"
               }
            ]
         },
         {  
            "controllerName":"developer-controller",
            "endPointLink":[  
               {  
                  "implementationNote":"ROLE_ADMIN, ROLE_ONC, and ROLE_ACB can see deleted developers. Everyone else can only see active developers.",
                  "link":"getDevelopersUsingGET"
               },
               {  
                  "implementationNote":"This method serves two purposes: to update a single developer's information and to merge two developers into one. A user of this service should pass in a single developerId to update just that developer. If multiple developer IDs are passed in, the service performs a merge meaning that a new developer is created with all of the information provided (name, address, etc.) and all of the products previously assigned to the developerId's specified are reassigned to the newly created developer. The old developers are then deleted. Security Restrictions: ROLE_ADMIN, ROLE_ONC, or ROLE_ACB",
                  "link":"updateDeveloperUsingPUT"
               },
               {  
                  "implementationNote":"Security Restrictions: ROLE_ADMIN, ROLE_ONC, or ROLE_ACB",
                  "link":"splitDeveloperUsingPOST"
               },
               {  
                  "implementationNote":"Security Restrictions: ROLE_ADMIN, ROLE_ONC, ROLE_ACB, or have administrative authority on the specified developer.",
                  "link":"getUsersUsingGET_1"
               },
               {  
                  "implementationNote":"The logged in user must have ROLE_ADMIN, ROLE_ONC, ROLE_ACB, or ROLE_DEVELOPER and have administrative authority on the specified developer. The user specified in the request will have all authorities removed that are associated with the specified developer.",
                  "link":"deleteUserFromDeveloperUsingDELETE"
               },
               
            ]
         },
         {  
            "controllerName":"product-controller",
            "endPointLink":[  
               {  
                  "implementationNote":" To merge: ROLE_ADMIN or ROLE_ONC. To update: ROLE_ADMIN, ROLE_ONC or ROLE_ACB.",
                  "implementationNote":"This method serves two purposes: to update a single product's information and to merge two products into one. A user of this service should pass in a single productId to update just that product. If multiple product IDs are passed in, the service performs a merge meaning that a new product is created with all of the information provided and all of the versions previously assigned to the productIds specified are reassigned to the newly created product. The old products are then deleted. Security Restrictions: To merge: ROLE_ADMIN or ROLE_ONC. To update: ROLE_ADMIN, ROLE_ONC or ROLE_ACB.",
                  "link":"updateProductUsingPUT"
               },
               {  
                  "implementationNote":"ROLE_ADMIN, ROLE_ONC, or ROLE_ACB",
                  "implementationNote":"Security Restrictions: ROLE_ADMIN, ROLE_ONC, or ROLE_ACB",
                  "link":"splitProductUsingPOST"
               },
               {  
                  "implementationNote":"Either list all products or optionally just all products belonging to a specific developer.",
                  "link":"getAllProductsUsingGET"
               }
            ]
         },
         {  
            "controllerName":"product-version-controller",
            "endPointLink":[  
               {  
                  "implementationNote":"Must have ROLE_ADMIN to merge or ROLE_ACB and have administrative authority on the specified ACB to do all actions except merge",
                  "link":"updateVersionUsingPUT"
               }
            ]
         },
         {  
            "controllerName":"scheduler-controller",
            "endPointLink":[  
               {  
                  "implementationNote":"ROLE_ADMIN, ROLE_ONC, or ROLE_ACB and have administrative authority on the specified ACB",
                  "link":"getAllJobsUsingGET_1"
               },
                {  
                  "implementationNote":"ROLE_ADMIN, ROLE_ONC or ROLE_ACB and have administrative authority on the specified ACB.",
                  "link":"updateJobUsingPUT"
               },
               {  
                  "implementationNote":"ROLE_ADMIN, ROLE_ONC, or ROLE_ACB and have administrative authority on the specified ACB.",
                  "link":"getAllTriggersUsingGET"
               },
               {  
                  "implementationNote":"ROLE_ADMIN, ROLE_ONC, or ROLE_ACB.",
                  "link":"createTriggerUsingPOST"
               },
               {  
                  "implementationNote":"ROLE_ADMIN, ROLE_ONC or ROLE_ACB and have administrative authority on the specified ACB.",
                  "link":"updateTriggerUsingPUT"
               }
            ]
         },
         {  
            "controllerName":"search-view-controller",
            "endPointLink":[  
               {  
                  "implementationNote":"ROLE_ADMIN, ROLE_ONC",
                  "link":"updateFuzzyChoicesForSearchingUsingPUT"
               },
               {  
                  "implementationNote":"This is useful for knowing what values one might possibly search for.",
                  "link":"getAccessibilityStandardsUsingGET"
               },
               {  
                  "implementationNote":"This is useful for knowing what values one might possibly search for.",
                  "link":"getAgeRangesUsingGET"
               },
               {  
                  "implementationNote":"This is useful for knowing what values one might possibly search for.",
                  "link":"getCertBodyNamesUsingGET"
               },
               {  
                  "implementationNote":"This is useful for knowing what values one might possibly search for.",
                  "link":"getEditionNamesUsingGET"
               },
               {  
                  "implementationNote":"This is useful for knowing what values one might possibly search for.",
                  "link":"getCertificationStatusesUsingGET"
               },
               {  
                  "implementationNote":"This is useful for knowing what values one might possibly search for.",
                  "link":"getClassificationNamesUsingGET"
               },
               {  
                  "implementationNote":"This is useful for knowing what values one might possibly search for.",
                  "link":"getDeveloperNamesUsingGET"
               },
               {  
                  "implementationNote":"This is useful for knowing what values one might possibly search for.",
                  "link":"getEducationTypesUsingGET"
               },
               {  
                  "implementationNote":"Security Restrictions: ROLE_ADMIN or ROLE_ONC",
                  "link":"getFuzzyChoicesUsingGET"
               },
               {  
                  "implementationNote":"This is useful for knowing what values one might possibly search for.",
                  "link":"getMacraMeasuresUsingGET"
               },
               {  
                  "implementationNote":"This is useful for knowing what values one might possibly search for.",
                  "link":"getPracticeTypeNamesUsingGET"
               },
               {  
                  "implementationNote":"This is useful for knowing what values one might possibly search for.",
                  "link":"getProductNamesUsingGET"
               },
               {  
                  "implementationNote":"This is useful for knowing what values one might possibly search for.",
                  "link":"getQmsStandardsUsingGET"
               },
               {  
                  "implementationNote":"This returns all of the other /data/{something} results in one single response.",
                  "link":"getSearchOptionsUsingGET"
               },
               {  
                  "implementationNote":"Security Restrictions: ROLE_ADMIN, ROLE_ONC, or ROLE_ACB.",
                  "link":"getSurveillanceOutcomesUsingGET"
               },
               {  
                  "implementationNote":"Security Restrictions: ROLE_ADMIN, ROLE_ONC, or ROLE_ACB.",
                  "link":"getSurveillanceProcessTypesUsingGET"
               },
               {  
                  "implementationNote":"This is useful for knowing what values one might possibly search for.",
                  "link":"getTargetedUsersUsingGET"
               },
               {  
                  "implementationNote":"This is useful for knowing what values one might possibly search for.",
                  "link":"getTestDataUsingGET"
               },
               {  
                  "implementationNote":"This is useful for knowing what values one might possibly search for.",
                  "link":"getTestFunctionalityUsingGET"
               },
               {  
                  "implementationNote":"This is useful for knowing what values one might possibly search for.",
                  "link":"getTestProceduresUsingGET"
               },
               {  
                  "implementationNote":"This is useful for knowing what values one might possibly search for.",
                  "link":"getTestStandardsUsingGET"
               },
               {  
                  "implementationNote":"This is useful for knowing what values one might possibly search for.",
                  "link":"getTestToolsUsingGET"
               },
               {  
                  "implementationNote":"This is useful for knowing what values one might possibly search for.",
                  "link":"getUcdProcessesUsingGET"
               },
               {  
                  "implementationNote":"Once per day, the entire certified product listing is written out to XML files on the CHPL servers, one for each certification edition. This method allows any user to download that XML file. It is formatted in such a way that users may import it into Microsoft Excel or any other XML tool of their choosing. To download any one of the XML files, append ‘&edition=year’ to the end of the query string (e.g., &edition=2015). A separate query is required to download each of the XML files.",
                  "link":"downloadUsingGET"
               },
               {  
                  "implementationNote":"If paging parameters are not specified, the first 20 records are returned by default. All parameters are optional. Any parameter that can accept multiple things (i.e. certificationStatuses) expects a comma-delimited list of those things (i.e. certificationStatuses = Active,Suspended). Date parameters are required to be in the format yyyy-MM-dd.",
                  "link":"searchGetUsingGET"
               },
               {  
                  "implementationNote":"Search the CHPL by specifying multiple fields of the data to search. If paging fields are not specified, the first 20 records are returned by default.",
                  "link":"searchPostUsingPOST"
               },
            ]
         },
         {  
            "controllerName":"job-controller",
            "endPointLink":[  
               {  
                  "implementationNote":"ROLE_ADMIN, ROLE_ONC",
                  "link":"getAllJobsUsingGET"
               }
            ]
         },
           {  
            "controllerName":"surveillance-report-controller",
            "endPointLink":[  
               {  
                  "implementationNote":"Security Restrictions: ROLE_ADMIN, ROLE_ONC, or ROLE_ACB and administrative authority on the ACB associated with the report.",
                  "link":"getAllAnnualReportsUsingGET"
               },
               {  
                  "implementationNote":"Security Restrictions: ROLE_ADMIN or ROLE_ACB and administrative authority on the ACB associated with the report.",
                  "link":"createAnnualReportUsingPOST"
               },
               {  
                  "implementationNote":"The associated ACB and year of the report cannot be changed. Security Restrictions: ROLE_ADMIN or ROLE_ACB and administrative authority on the ACB associated with the report.",
                  "link":"updateAnnualReportUsingPUT"
               },
               {  
                  "implementationNote":"Security Restrictions: ROLE_ADMIN, ROLE_ONC, or ROLE_ACB and administrative authority on the ACB associated with the report.",
                  "link":"getAnnualReportUsingGET"
               },
               {  
                  "implementationNote":"Security Restrictions: ROLE_ADMIN or ROLE_ACB and administrative authority on the ACB associated with the report.",
                  "link":"deleteAnnualReportUsingDELETE"
               },
               {  
                  "implementationNote":"Security Restrictions: ROLE_ADMIN, ROLE_ONC, or ROLE_ACB and administrative authority on the ACB associated with the report.",
                  "link":"exportAnnualReportUsingGET"
               },
               {  
                  "implementationNote":"Security Restrictions: ROLE_ADMIN, ROLE_ONC, or ROLE_ACB and administrative authority on the ACB associated with the report.",
                  "link":"exportQuarterlyReportUsingGET"
               },
               {  
                  "implementationNote":"Security Restrictions: ROLE_ADMIN, ROLE_ONC, or ROLE_ACB and administrative authority on the ACB associated with the report.",
                  "link":"getAllQuarterlyReportsUsingGET"
               },
               {  
                  "implementationNote":"Security Restrictions: ROLE_ADMIN or ROLE_ACB and administrative authority on the ACB associated with the report.",
                  "link":"createQuarterlyReportUsingPOST"
               },
               {  
                  "implementationNote":"The associated ACB, year, and quarter of the report cannot be changed. Security Restrictions: ROLE_ADMIN or ROLE_ACB and administrative authority on the ACB associated with the report.",
                  "link":"updateQuarterlyReportUsingPUT"
               },
               {  
                  "implementationNote":"Security Restrictions: ROLE_ADMIN, ROLE_ONC, or ROLE_ACB and administrative authority on the ACB associated with the report.",
                  "link":"getQuarterlyReportUsingGET"
               },
               {  
                  "implementationNote":"Security Restrictions: ROLE_ADMIN or ROLE_ACB and administrative authority on the ACB associated with the report.",
                  "link":"deleteQuarterlyReportUsingDELETE"
               },
               {  
                  "implementationNote":"Security Restrictions: ROLE_ADMIN, ROLE_ONC, or ROLE_ACB and administrative authority on the ACB associated with the report.",
                  "link":"getRelevantComplaintsUsingGET"
               },
               {  
                  "implementationNote":"Security Restrictions: ROLE_ADMIN, ROLE_ONC, or ROLE_ACB and administrative authority on the ACB associated with the report.",
                  "link":"getRelevantListingsUsingGET"
               },
               {  
                  "implementationNote":"Security Restrictions: ROLE_ADMIN or ROLE_ACB and administrative authority on the ACB associated with the report.",
                  "link":"updateRelevantListingUsingPUT"
               },
               {  
                  "implementationNote":"Security Restrictions: ROLE_ADMIN or ROLE_ACB and administrative authority on the ACB associated with the report.",
                  "link":"updatePrivilegedSurveillanceDataUsingPUT"
               },
            ]
         },
         {  
            "controllerName":"surveillance-controller",
            "endPointLink":[  
               {  
                  "implementationNote":"ROLE_ADMIN or ROLE_ACB and administrative authority on the ACB associated with the certified product is required.",
                  "link":"createSurveillanceUsingPOST"
               },
               {  
                  "implementationNote":"ROLE_ADMIN or ROLE_ACB and administrative authority on the ACB associated with the certified product is required",
                  "link":"getAllPendingSurveillanceUsingGET"
               },
               {  
                  "implementationNote":"ROLE_ADMIN or ROLE_ACB and administrative authority on the ACB associated with the certified product is required",
                  "link":"confirmPendingSurveillanceUsingPOST"
               },
               {  
                  "implementationNote":"ROLE_ADMIN, ROLE_ONC, or ROLE_ACB and administrative authority on the ACB(s) responsible for the product(s) in the file.",
                  "link":"uploadUsingPOST_1"
               },
               {  
                  "implementationNote":"ROLE_ADMIN, ROLE_ONC, or ROLE_ACB and associated with the certified product is required.",
                  "link":"updateSurveillanceUsingPUT"
               },
               {  
                  "implementationNote":"ROLE_ADMIN or ROLE_ACB and have administrative authority on the specified ACB for each pending surveillance is required",
                  "link":"deleteSurveillanceUsingDELETE"
               },
               {  
                  "implementationNote":"ROLE_ADMIN, ROLE_ONC, or ROLE_ACB and administrative authority on the associated ACB",
                  "link":"deleteNonconformityDocumentFromSurveillanceUsingDELETE"
               },
               {  
                  "implementationNote":"ROLE_ADMIN, ROLE_ONC, or ROLE_ACB and administrative authority on the associated ACB.",
                  "link":"uploadNonconformityDocumentUsingPOST"
               }
            ]
         },
         {  
            "controllerName":"testing-lab-controller",
            "endPointLink":[  
               {  
                  "implementationNote":"ROLE_ADMIN or ROLE_ONC to create a new testing lab",
                  "link":"createAtlUsingPOST"
               },
               {  
                  "implementationNote":"ROLE_ADMIN, ROLE_ONC, or ROLE_ATL and have administrative authority on the testing lab whose data is being updated",
                  "link":"updateAtlUsingPUT"
               },
               {  
                  "implementationNote":"ROLE_ADMIN, ROLE_ONC, or ROLE_ATL and have administrative authority on the specified ATL",
                  "link":"deleteUserFromAtlUsingDELETE"
               },
               {  
                  "implementationNote":"Setting the 'editable' parameter to true will return all ATLs that the logged in user has edit permissions on. Security Restrictions: When 'editable' is 'true' ROLE_ADMIN or ROLE_ONC can see all ATLs. ROLE_ATL can see their own ATL. When 'editable' is 'false' all users can see all ATLs.",
                  "link":"getAtlsUsingGET"
               },
               {  
                  "implementationNote":"Security Restrictions: ROLE_ADMIN, ROLE_ONC, or have administrative or read authority on the specified ATL.",
                  "link":"getUsersUsingGET_2"
               }
            ]
         },
         {  
            "controllerName":"certification-id-controller",
            "endPointLink":[  
               {  
                  "implementationNote":"Security Restrictions: ROLE_ADMIN, ROLE_ONC, or ROLE_CMS_STAFF",
                  "link":"getAllUsingGET"
               },
               {  
                  "implementationNote":"Retrieves a CMS EHR Certification ID for a collection of products or creates a new one if one does not already exist. Returns a list of basic product information, Criteria and CQM calculations, and the associated CMS EHR Certification ID if one exists.",
                  "link":"createCertificationIdUsingPOST"
               },
               {  
                  "implementationNote":"Retrieves a CMS EHR Certification ID for a collection of products. Returns a list of basic product information, Criteria and CQM calculations, and the associated CMS EHR Certification ID if one exists.",
                  "link":"searchCertificationIdUsingGET"
               },
               {  
                  "implementationNote":"Returns true or false for each EHR Certification ID specified.",
                  "link":"verifyCertificationIdUsingGET"
               },
               {  
                  "implementationNote":"Returns a boolean value for each EHR Certification ID specified.",
                  "link":"verifyCertificationIdUsingPOST"
               },
               {  
                  "implementationNote":"Retrieves detailed information about a specific EHR Certification ID including the list of products that make it up. This method can be used when verfying a small number ofCertification Ids, where the length of the URL, plus the list of IDs, is less than themaximum length URL that your client can handle.",
                  "link":"getCertificationIdUsingGET"
               }
            ]
         },
          {  
            "controllerName":"chpl-file-controller",
            "endPointLink":[  
               {
                  "implementationNote":"Retrieves the current API Documentation file.",
                  "link":"getApiDocumentationFileUsingGET"
               },
               {
                "implementationNote":"Uploads a new current API Documentation file. Security Restrictions: ROLE_ADMIN or ROLE_ONC",
                  "link":"uploadApiDocumentationUsingPOST"
               },
               {
                "implementationNote":"Retrieves the details about the current API Documentation file.",
                  "link":"getApiDocumentationFileDetailsUsingGET"
               }
            ]
         },
         {  
            "controllerName":"user-management-controller",
            "endPointLink":[  
               {  
                  "implementationNote":"ROLE_ADMIN and ROLE_ONC can see all users. ROLE_ACB, ROLE_ATL, and ROLE_CMS_STAFF can see their self.",
                  "link":"getUsersUsingGET_3"
               },
               {  
                  "implementationNote":"When a new user accepts their invitation to the CHPL they have to provide an email address. They then receive an email prompting them to confirm that this email address is valid. Confirming the email address must be done via this request before the user will be allowed to log in with the credentials they selected. The correct order to call invitation requests is the following: 1) /invite 2) /create or /authorize 3) /confirm",
                  "link":"confirmUserUsingPOST"
               },
               {  
                  "implementationNote":"An individual who has been invited to the CHPL has a special user key in their invitation email. That user key along with all the information needed to create a new user's account can be passed in here. The account is created but cannot be used until that user confirms that their email address is valid. The correct order to call invitation requests is the following: 1) /invite 2) /create or /authorize 3) /confirm",
                  "link":"createUserUsingPOST"
               },
               {  
                  "implementationNote":"Security Restrictions: ROLE_ADMIN or ROLE_ONC",
                  "link":"deleteUserUsingDELETE"
               },
               {  
                  "implementationNote":"ROLE_ADMIN and ROLE_ONC can invite users to any organization. ROLE_ACB and ROLE_ATL can add users to their own organization.",
                  "link":"inviteUserUsingPOST"
               },
               {  
                  "implementationNote":"ROLE_ADMIN and ROLE_ONC",
                  "link":"authorizeUserUsingPOST"
               },
               {  
                  "implementationNote":"The logged in user must either be the user in the parameters, have ROLE_ADMIN, or have ROLE_ACB.",
                  "link":"getUserUsingGET"
               }
            ]
         },
         {  
            "controllerName":"change-request-controller",
            "endPointLink":[  
               {  
                  "implementationNote":"ROLE_DEVELOPER can get change requests where they have administrative authority based on the developer.",
                  "link":"getAllChangeRequestsUsingGET"
               },
               {  
                  "implementationNote":"ROLE_DEVELOPER can create change requests where they have administrative authority based on the developer.",
                  "link":"createChangeRequestUsingPOST"
               },
               {  
                  "implementationNote":"ROLE_DEVELOPER can get change requests where they have administrative authority based on the developer.",
                  "link":"getChangeRequestUsingGET"
               },
               {  
                  "implementationNote":"ROLE_DEVELOPER can update change requests where they have administrative authority based on the developer.",
                  "link":"updateChangeRequestUsingPUT"
               }
            ]
         }
      ]
   }
]
